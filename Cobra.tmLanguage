<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>cobra</string>
	</array>
	<key>name</key>
	<string>Cobra</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>match</key>
			<string>(#).*$</string>
			<key>name</key>
			<string>comment.line.cobra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(0x\h*)L?)</string>
			<key>name</key>
			<string>constant.numeric.hexadecimal.cobra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?:(0[0-7]+)L?)</string>
			<key>name</key>
			<string>constant.numeric.octal.cobra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(\d+\.\d*(e[\-\+]?\d+)?))(?=[^a-zA-Z_])</string>
			<key>name</key>
			<string>constant.numeric.float.cobra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;=[^0-9a-zA-Z_])(?i:(\.\d+(e[\-\+]?\d+)?))</string>
			<key>name</key>
			<string>constant.numeric.float.cobra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(\d+e[\-\+]?\d+))</string>
			<key>name</key>
			<string>constant.numeric.float.cobra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:([1-9]+[0-9]*|0)L)</string>
			<key>name</key>
			<string>constant.numeric.integer.long.decimal.cobra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b([1-9]+[0-9]*|0)</string>
			<key>name</key>
			<string>constant.numeric.integer.decimal.cobra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(branch|on|else|catch|finally|for|if|try|while|break|continue|pass|raise|return|using|yield)\b</string>
			<key>name</key>
			<string>keyword.control.cobra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(and|in|not|or|any|all)\b</string>
			<key>name</key>
			<string>keyword.operator.logical.cobra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(as|from|assert|print|var|invariant|is|throw|expect|trace)\b</string>
			<key>name</key>
			<string>keyword.other.cobra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>&lt;\=|&gt;\=|\=\=|&lt;|&gt;|&lt;&gt;</string>
			<key>name</key>
			<string>keyword.operator.comparison.cobra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\=|\+\=|-\=|\*\=|/\=|//\=|%\=|&amp;\=|\|\=|\^\=|&gt;&gt;\=|&lt;&lt;\=|\*\*\=</string>
			<key>name</key>
			<string>keyword.operator.assignment.cobra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\+|\-|\*|\*\*|/|//|%|&lt;&lt;|&gt;&gt;|&amp;|\||\^|~</string>
			<key>name</key>
			<string>keyword.operator.arithmetic.cobra</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.namespacing.cobra</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.class.cobra</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\s*(use|namespace)\s+([a-zA-Z0-9_.]+)$</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(def|cue|get|set|test|ensure|body|require|shared|var|sig|invariant)\b</string>
			<key>name</key>
			<string>storage.type.function.cobra</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.type.nillible-marker.cobra</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(nil|bool|char|int|uint|float|decimal|number|dynamic|int8|int16|int32|int64|uint8|uint16|uint32|uint64)\b(\?)?</string>
			<key>name</key>
			<string>support.type.primitive.cobra</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(String|List|Dictionary|Set|Stack|Queue|TextWriter|TextReader|StringBuilder)(?:\?)?\s*(&lt;of\s*[a-zA-Z0-9_]+&gt;)\b</string>
			<key>name</key>
			<string>support.class.cobra</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#strings</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*(""")</string>
			<key>end</key>
			<string>"""\s*$</string>
			<key>name</key>
			<string>comment.documentation.cobra</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*(/#)</string>
			<key>end</key>
			<string>#/\s*$</string>
			<key>name</key>
			<string>comment.block.cobra</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.declaration.cobra</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.private-variable.cobra</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.specifier.cobra</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>support.other.type.cobra</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s+(var)\s+(_[\w_]+)\s+(as)?(\s+[\w_&lt;&gt;\s?]+)</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.enumeration.cobras</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\s*(?:enum|interface|struct|mixin)\s+([\w_]+)</string>
			<key>name</key>
			<string>keyword.operator.enumeration.cobra</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>operator.name.is.cobra</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.other.modifier.cobra</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\s*(is|has)\s+(abstract|internal|nonvirtual|private|protected|public|shared|vari|inout|out|override|partial|virtual)\s*</string>
			<key>name</key>
			<string>keyword.operator.enumeration.cobra</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>operator.name.is.cobra</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.other.interface.cobra</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\s*(implements|inherits|where|must be)\s+([a-zA-Z_][\w_]*)\s*</string>
			<key>name</key>
			<string>keyword.operator.enumeration.cobra</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.method.cobra</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.cobra</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s+(def|cue|get|pro|sig)\s+([a-zA-Z_]\w+)</string>
			<key>name</key>
			<string>meta.type.method.cobra</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.class-definition.cobra</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.user-defined-type.cobra</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(class)\s+([a-zA-Z_][\w_]*)\s*</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>escaped-characters</key>
		<dict>
			<key>match</key>
			<string>(\\x[0-9A-F]{2})|(\\[0-7]{3})|(\\\n)|(\\\\)|(\\\")|(\\')|(\\a)|(\\b)|(\\f)|(\\n)|(\\r)|(\\t)|(\\v)</string>
			<key>name</key>
			<string>constant.character.escape.cobra</string>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!')r?'(?!')</string>
					<key>end</key>
					<string>'</string>
					<key>name</key>
					<string>string.quoted.single.cobra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escaped-characters</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#varsub</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!")r?"(?!")</string>
					<key>end</key>
					<string>"</string>
					<key>name</key>
					<string>string.quoted.double.cobra</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escaped-characters</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#varsub</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>varsub</key>
		<dict>
			<key>match</key>
			<string>(\[[\w.]+\])</string>
			<key>name</key>
			<string>support.other.variable-substitution.cobra</string>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.cobra</string>
	<key>uuid</key>
	<string>3d6d5246-6da9-446a-869b-40345b01114b</string>
</dict>
</plist>
